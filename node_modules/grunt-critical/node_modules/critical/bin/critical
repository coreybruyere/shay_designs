#!/usr/bin/env node
'use strict';
var meow = require('meow');
var objectAssign = require('object-assign');
var indentString = require('indent-string');
var critical = require('../src/critical');
var stdin = require('get-stdin');
var path = require('path');
var os = require('os');
var _ = require('lodash');
var ok;


var cli = meow({
    pkg: '../package.json',
    help: [
        'Usage: critical <input> [<option>]',
        '',
        'Options:',
        '   -b, --base              Your base directory',
        '   -c, --css               Your CSS Files (optional)',
        '   -w, --width             Viewport width',
        '   -h, --height            Viewport height',
        '   -H, --htmlTarget        Target for final HTML output',
        '   -S, --styleTarget       Target for generated critical-path CSS (which we inline)',
        '   -m, --minify            Minify critical-path CSS when inlining',
        '   -e, --extract           Extract inlined styles from referenced stylesheets'
    ].join('\n')
}, {
    alias: {
        b: 'base',
        c: 'css',
        w: 'width',
        h: 'height',
        H: 'htmlTarget',
        S: 'styleTarget',
        m: 'minify',
        e: 'extract'
    }
});

// cleanup cli flags and assert cammelcase keeps camelcase
cli.flags = _.reduce(cli.flags,function(res,val,key){
    if (key.length <= 1) {
        return res;
    }
    switch (key) {
        case 'htmltarget':
            res.htmlTarget = val;
            break;
        case 'styletarget':
            res.styleTarget = val;
            break;
        default:
            res[key] = val;
            break;
    }

    return res;
},{});

function run(data) {
    var opts = objectAssign({ base: process.cwd()}, cli.flags);
    var command = opts.htmlTarget ? 'generateInline' : 'generate';

    if (command === 'generate') {
        opts.dest = opts.styleTarget || '';
    }


    ok = true;

    if (data) {
        opts.html = data;
    } else {
        opts.src = cli.input[0] ? path.resolve(cli.input[0]) : '';
    }

    critical[command](opts, function (err, val) {
        if (err) {
            process.stderr.write(indentString(err.message || err,'  Error: '));
            process.stderr.write(os.EOL);
            cli.showHelp();
        } else {
            process.stdout.write(val);
        }
    });
}



try {
    if (cli.input[0]) {
        run();
    } else {
        stdin(run);
        setTimeout(function(){
            if (ok) {
                return;
            }
            cli.showHelp();
        }, 100);
    }
} catch (err) {
    process.stderr.write(indentString(err.message,'  Error: '));
    process.stderr.write(os.EOL);
    cli.showHelp();
}
